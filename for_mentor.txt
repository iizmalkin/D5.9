venv\Scripts\activate
python manage.py shell
from  news.models import *


Создание пользователей 

user1 = User.objects.create_user('user1')
user2 = User.objects.create_user('user2')
user3 = User.objects.create_user('user3')
user4 = User.objects.create_user('user4')

2. Создать два объекта модели Author, связанные с пользователями.

Author1 = Author.objects.create(user = user1)
Author2 = Author.objects.create(user = user2)
Author3 = Author.objects.create(user = user3)
Author4 = Author.objects.create(user = user4)

3. Добавить 4 категории в модель Category.

Category1 = Category.objects.create(name_category = 'Экономика')
Сategory2 = Category.objects.create(name_category = 'Бизнес')
Category3 = Category.objects.create(name_category = 'Учеба')
Category4 = Category.objects.create(name_category = 'Отдых')

4.Добавить 2 статьи и 1 новость

post = Post.objects.create(post_or_news = 'Post', header = 'Заголовок № 1', content = 'Статья № 1', author_id = 1) 
post = Post.objects.create(post_or_news = 'Post', header = 'Заголовок № 3', content = 'Статья № 3', author_id = 2) 
post = Post.objects.create(post_or_news = 'News', header = 'Заголовок № 2', content = 'Статья № 2', author_id = 2) 

5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).

post_category1 =  Postcategory.objects.create(category_id = 1, post_id = 1)
post_category2 =  Postcategory.objects.create(category_id = 2, post_id = 1)
post_category3 =  Postcategory.objects.create(category_id = 3, post_id = 2)
post_category4 =  Postcategory.objects.create(category_id = 4, post_id = 3)


6.Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).


comment = Comment.objects.create(text = 'Комментарий № 1', post_id = 1, user_id = 1) 
comment = Comment.objects.create(text = 'Комментарий № 2', post_id =2, user_id = 2) 
comment = Comment.objects.create(text = 'Комментарий № 3', post_id =3, user_id = 2) 
comment = Comment.objects.create(text = 'Комментарий № 4', post_id =3, user_id = 4) 


7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.

post = Post.objects.get(pk=1) 
post.like()
post.dislike()
comment = Comment.objects.get(pk=1)
comment.like()
comment.dislike()

8. Обновить рейтинги пользователей.

author = Author.objects.get(pk=1)

author.update_rating()


9.Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).

best = Author.objects.all().order_by('-user_rating').values('user', 'user_rating').first()

10.  Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.

post_best = Post.objects.order_by('-post_rating').first()
post_best.date_add
post_best.author.user.username
post_best.post_rating
post_best.header
post_best.preview()

11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.


>>> comment = Comment.objects.filter(post_id = post_best).values('text')
>>> comment  







